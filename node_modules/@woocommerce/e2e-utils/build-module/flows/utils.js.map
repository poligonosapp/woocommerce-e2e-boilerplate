{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-utils/src/flows/utils.js"],"names":["getSlug","text","trim","toLowerCase","from","to","i","l","length","replace","RegExp","charAt","describeIf","condition","describe","skip","itIf","it","waitForTimeout","timeout","Promise","resolve","setTimeout"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,OAAO,MAAMA,OAAO,GAAKC,IAAF,IAAY;AACnCA,EAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,GAAYC,WAAZ,EAAP,CADmC,CAGnC;;AACA,QAAMC,IAAI,GAAG,gCAAb;AACA,QAAMC,EAAE,GAAG,gCAAX;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCF,CAAC,GAAGC,CAArC,EAAwCD,CAAC,EAAzC,EAA6C;AAC5CL,IAAAA,IAAI,GAAGA,IAAI,CAACQ,OAAL,CAAa,IAAIC,MAAJ,CAAWN,IAAI,CAACO,MAAL,CAAYL,CAAZ,CAAX,EAA2B,GAA3B,CAAb,EAA8CD,EAAE,CAACM,MAAH,CAAUL,CAAV,CAA9C,CAAP;AACA;;AAED,SAAOL,IAAI,CACTQ,OADK,CACG,cADH,EACmB,EADnB,EACuB;AADvB,GAELA,OAFK,CAEG,MAFH,EAEW,GAFX,EAEgB;AAFhB,GAGLA,OAHK,CAGG,KAHH,EAGU,GAHV,EAGe;AAHf,GAILA,OAJK,CAIG,KAJH,EAIU,EAJV,EAIc;AAJd,GAKLA,OALK,CAKG,KALH,EAKU,EALV,EAKc;AALd,GAMLA,OANK,CAMG,IANH,EAMS,GANT,CAAP;AAOA,CAlBO,C,CAoBR;;AACA,OAAO,MAAMG,UAAU,GAAKC,SAAF,IACzBA,SAAS,GAAGC,QAAH,GAAcA,QAAQ,CAACC,IAD1B,C,CAGP;;AACA,OAAO,MAAMC,IAAI,GAAKH,SAAF,IACnBA,SAAS,GAAGI,EAAH,GAAQA,EAAE,CAACF,IADd;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,cAAc,GAAG,MAAQC,OAAR,IAAqB;AAClD,QAAM,IAAIC,OAAJ,CAAeC,OAAF,IAAeC,UAAU,CAAED,OAAF,EAAWF,OAAX,CAAtC,CAAN;AACA,CAFM","sourcesContent":["/**\n * Take a string name and generate the slug for it.\n * Example: 'My plugin' => 'my-plugin'\n * @param text string to convert to a slug\n *\n * Sourced from: https://gist.github.com/spyesx/561b1d65d4afb595f295\n **/\n export const getSlug = ( text ) => {\n\ttext = text.trim().toLowerCase();\n\n\t// remove accents, swap ñ for n, etc\n\tconst from = 'åàáãäâèéëêìíïîòóöôùúüûñç·/_,:;';\n\tconst to = 'aaaaaaeeeeiiiioooouuuunc------';\n\n\tfor (let i = 0, l = from.length; i < l; i++) {\n\t\ttext = text.replace(new RegExp(from.charAt(i), \"g\"), to.charAt(i));\n\t}\n\n\treturn text\n\t\t.replace(/[^a-z0-9 -]/g, '') // remove invalid chars\n\t\t.replace(/\\s+/g, '-') // collapse whitespace and replace by -\n\t\t.replace(/-+/g, '-') // collapse dashes\n\t\t.replace(/^-+/, '') // trim - from start of text\n\t\t.replace(/-+$/, '') // trim - from end of text\n\t\t.replace(/-/g, '-');\n};\n\n// Conditionally determine whether or not to skip a test suite\nexport const describeIf = ( condition ) =>\n\tcondition ? describe : describe.skip;\n\n// Conditionally determine whether or not to skip a test case\nexport const itIf = ( condition ) =>\n\tcondition ? it : it.skip;\n\n/**\n * Wait for a timeout in milliseconds\n * @param timeout delay time in milliseconds\n * @returns {Promise<void>}\n */\nexport const waitForTimeout = async ( timeout ) => {\n\tawait new Promise( ( resolve ) => setTimeout( resolve, timeout ) );\n};\n"]}