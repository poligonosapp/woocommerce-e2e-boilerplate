{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-utils/src/flows/with-rest-api.js"],"names":["client","factories","api","withDefaultPermalinks","onboardingProfileEndpoint","productsEndpoint","productCategoriesEndpoint","shippingClassesEndpoint","shippingZoneEndpoint","systemStatusEndpoint","taxClassesEndpoint","taxRatesEndpoint","userEndpoint","deleteAllRepositoryObjects","repository","defaultObjectId","statuses","objects","minimum","s","length","status","list","o","id","delete","e","flattenTaxRate","taxRate","rate","class","name","withRestApi","resetOnboarding","onboardingReset","completed","industry","business_extensions","skipped","product_types","product_count","selling_venues","revenue","theme","setup_client","wccom_connected","response","put","expect","statusCode","toEqual","deleteAllCoupons","Coupon","restRepository","deleteCoupon","couponId","deleteAllProducts","SimpleProduct","deleteAllProductAttributes","testResponse","productAttributesPath","productAttributes","get","data","a","toBe","deleteAllProductCategories","productCategoriesPath","productCategories","c","slug","deleteAllProductTags","productTagsPath","productTags","t","deleteAllOrders","orderStatuses","Order","addShippingZoneAndMethod","zoneName","zoneLocation","zipCode","zoneMethod","cost","additionalZoneMethods","path","post","zoneId","zoneType","zoneCode","split","zoneLocationPayload","code","type","push","locationResponse","methodPayload","method_id","methodsResponse","methodId","costPayload","settings","costResponse","z","deleteAllShippingZones","shippingZones","deleteAllShippingClasses","shippingClasses","deleteCustomerByEmail","emailAddress","query","search","context","customers","deleteUser","force","reassign","resetSettingsGroupToDefault","settingsGroup","settingsClient","Setting","default","defaultSetting","group_id","value","update","updateSettingOption","settingId","payload","updatePaymentGateway","paymentGatewayId","batchCreateOrders","orders","create","addTaxClasses","taxClasses","existingTaxClasses","existingTaxNames","map","taxClass","newTaxClasses","filter","includes","addTaxRates","taxRates","existingTaxRates","existingRates","getSystemEnvironment","environment","createProductCategory","categoryName","categoryId","categorySlug","category"],"mappings":"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","sourcesContent":["import factories from '../factories';\nimport { getSlug } from './utils';\nimport {Coupon, Setting, SimpleProduct, Order} from '@woocommerce/api';\n\nconst client = factories.api.withDefaultPermalinks;\nconst onboardingProfileEndpoint = '/wc-admin/onboarding/profile';\nconst productsEndpoint = '/wc/v3/products';\nconst productCategoriesEndpoint = '/wc/v3/products/categories';\nconst shippingClassesEndpoint = '/wc/v3/products/shipping_classes';\nconst shippingZoneEndpoint = '/wc/v3/shipping/zones';\nconst systemStatusEndpoint = '/wc/v3/system_status';\nconst taxClassesEndpoint = '/wc/v3/taxes/classes';\nconst taxRatesEndpoint = '/wc/v3/taxes';\nconst userEndpoint = '/wp/v2/users';\n\n/**\n * Utility function to delete all merchant created data store objects.\n *\n * @param repository\n * @param defaultObjectId\n * @param statuses Status of the object to check\n * @returns {Promise<void>}\n */\nconst deleteAllRepositoryObjects = async ( repository, defaultObjectId = null, statuses = [ 'draft', 'publish', 'trash' ] ) => {\n\tlet objects;\n\tconst minimum = defaultObjectId == null ? 0 : 1;\n\n\tfor ( let s = 0; s < statuses.length; s++ ) {\n\t\tconst status = statuses[ s ];\n\t\tobjects = await repository.list( { status } );\n\t\twhile (objects.length > minimum) {\n\t\t\tfor (let o = 0; o < objects.length; o++) {\n\t\t\t\t// Skip default data store object\n\t\t\t\tif (objects[o].id == defaultObjectId) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// We may be getting a cached copy of the dataset and the object has already been deleted.\n\t\t\t\ttry {\n\t\t\t\t\tawait repository.delete(objects[o].id);\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\t\t\tobjects = await repository.list( { status } );\n\t\t}\n\t}\n};\n\n/**\n * Utility to flatten a tax rate.\n *\n * @param {object} taxRate Tax rate to be flattened.\n * @return {string}\n */\nconst flattenTaxRate = ( taxRate ) => {\n\treturn taxRate.rate + '/' + taxRate.class + '/' + taxRate.name;\n};\n\n/**\n * Utility functions that use the REST API to process the requested function.\n */\nexport const withRestApi = {\n\t/**\n\t * Reset onboarding to equivalent of new site.\n\t * @returns {Promise<void>}\n\t */\n\tresetOnboarding: async () => {\n\t\tconst onboardingReset = {\n\t\t\tcompleted: false,\n\t\t\tindustry: [],\n\t\t\tbusiness_extensions: [],\n\t\t\tskipped: false,\n\t\t\tproduct_types: [],\n\t\t\tproduct_count: '0',\n\t\t\tselling_venues: 'no',\n\t\t\trevenue: 'none',\n\t\t\ttheme: '',\n\t\t\tsetup_client: false,\n\t\t\twccom_connected: false,\n\t\t};\n\n\t\tconst response = await client.put( onboardingProfileEndpoint, onboardingReset );\n\t\texpect( response.statusCode ).toEqual( 200 );\n\t},\n\t/**\n\t * Use api package to delete coupons.\n\t *\n\t * @return {Promise} Promise resolving once coupons have been deleted.\n\t */\n\tdeleteAllCoupons: async () => {\n\t\tconst repository = Coupon.restRepository( client );\n\t\tawait deleteAllRepositoryObjects( repository );\n\t},\n\t/**\n\t * Use api package to delete a coupon.\n\t *\n\t * @param {number} couponId Coupon ID.\n\t * @return {Promise} Promise resolving once coupon has been deleted.\n\t */\n\tdeleteCoupon: async ( couponId ) => {\n\t\tconst repository = Coupon.restRepository( client );\n\t\tawait repository.delete( couponId );\n\t},\n\t/**\n\t * Use api package to delete products.\n\t *\n\t * @return {Promise} Promise resolving once products have been deleted.\n\t */\n\tdeleteAllProducts: async () => {\n\t\tconst repository = SimpleProduct.restRepository( client );\n\t\tawait deleteAllRepositoryObjects( repository );\n\t},\n\t/**\n\t * Use the API to delete all product attributes.\n\t *\n\t * @param {boolean} testResponse Test the response status code.\n\t * @return {Promise} Promise resolving once attributes have been deleted.\n\t */\n\tdeleteAllProductAttributes: async ( testResponse = true ) => {\n\t\tconst productAttributesPath = productsEndpoint + '/attributes';\n\t\tconst productAttributes = await client.get( productAttributesPath );\n\t\tif ( productAttributes.data && productAttributes.data.length ) {\n\t\t\tfor ( let a = 0; a < productAttributes.data.length; a++ ) {\n\t\t\t\tconst response = await client.delete( productAttributesPath + `/${productAttributes.data[a].id}?force=true` );\n\t\t\t\tif ( testResponse ) {\n\t\t\t\t\texpect( response.status ).toBe( 200 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Use the API to delete all product categories.\n\t *\n\t * @param {boolean} testResponse Test the response status code.\n\t * @return {Promise} Promise resolving once categories have been deleted.\n\t */\n\tdeleteAllProductCategories: async ( testResponse = true ) => {\n\t\tconst productCategoriesPath = productsEndpoint + '/categories';\n\t\tconst productCategories = await client.get( productCategoriesPath );\n\t\tif ( productCategories.data && productCategories.data.length ) {\n\t\t\tfor ( let c = 0; c < productCategories.data.length; c++ ) {\n\t\t\t\t// The default `uncategorized` category can't be deleted\n\t\t\t\tif ( productCategories.data[c].slug == 'uncategorized' ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst response = await client.delete( productCategoriesPath + `/${productCategories.data[c].id}?force=true` );\n\t\t\t\tif ( testResponse ) {\n\t\t\t\t\texpect( response.status ).toBe( 200 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Use the API to delete all product tags.\n\t *\n\t * @param {boolean} testResponse Test the response status code.\n\t * @return {Promise} Promise resolving once tags have been deleted.\n\t */\n\tdeleteAllProductTags: async ( testResponse = true ) => {\n\t\tconst productTagsPath = productsEndpoint + '/tags';\n\t\tconst productTags = await client.get( productTagsPath );\n\t\tif ( productTags.data && productTags.data.length ) {\n\t\t\tfor ( let t = 0; t < productTags.data.length; t++ ) {\n\t\t\t\tconst response = await client.delete( productTagsPath + `/${productTags.data[t].id}?force=true` );\n\t\t\t\tif ( testResponse ) {\n\t\t\t\t\texpect( response.status ).toBe( 200 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Use api package to delete all orders.\n\t *\n\t * @return {Promise} Promise resolving once orders have been deleted.\n\t */\n\tdeleteAllOrders: async () => {\n\t\t// We need to specfically filter on order status here to make sure we catch all orders to delete.\n\t\tconst orderStatuses = ['pending', 'processing', 'on-hold', 'completed', 'cancelled', 'refunded', 'failed', 'trash'];\n\t\tconst repository = Order.restRepository( client );\n\t\tawait deleteAllRepositoryObjects( repository, null, orderStatuses );\n\t},\n\t/**\n\t * Adds a shipping zone along with a shipping method using the API.\n\t *\n\t * @param zoneName Shipping zone name.\n\t * @param zoneLocation Shiping zone location. Defaults to country:US. For states use: state:US:CA.\n\t * @param zipCode Shipping zone zip code. Default is no zip code.\n\t * @param zoneMethod Shipping method type. Defaults to flat_rate (use also: free_shipping or local_pickup).\n\t * @param cost Shipping method cost. Default is no cost.\n\t * @param additionalZoneMethods Array of additional zone methods to add to the shipping zone.\n\t * @param {boolean} testResponse Test the response status code.\n\t */\n\taddShippingZoneAndMethod: async (\n\t\tzoneName,\n\t\tzoneLocation = 'country:US',\n\t\tzipCode = '',\n\t\tzoneMethod = 'flat_rate',\n\t\tcost = '',\n\t\tadditionalZoneMethods = [],\n\t\ttestResponse = true ) => {\n\n\t\tconst path = 'wc/v3/shipping/zones';\n\n\t\tconst response = await client.post( path, { name: zoneName } );\n\t\tif ( testResponse ) {\n\t\t\texpect( response.status ).toEqual( 201 );\n\t\t}\n\t\tlet zoneId = response.data.id;\n\n\t\t// Select shipping zone location\n\t\tlet [ zoneType, zoneCode ] = zoneLocation.split(/:(.+)/);\n\t\tlet zoneLocationPayload = [\n\t\t   {\n\t\t\t   code: zoneCode,\n\t\t\t   type: zoneType,\n\t\t   }\n\t\t];\n\n\t\t// Fill shipping zone postcode if provided\n\t\tif ( zipCode ) {\n\t\t   zoneLocationPayload.push( {\n\t\t\t   code: zipCode,\n\t\t\t   type: \"postcode\",\n\t\t   } );\n\t\t}\n\n\t\tconst locationResponse = await client.put( path + `/${zoneId}/locations`, zoneLocationPayload );\n\t\tif ( testResponse ) {\n\t\t\texpect( locationResponse.status ).toEqual( 200 );\n\t\t}\n\n\t   // Add shipping zone method\n\t   let methodPayload = {\n\t\t   method_id: zoneMethod\n\t   }\n\n\t   const methodsResponse = await client.post( path + `/${zoneId}/methods`, methodPayload );\n\t\tif ( testResponse ) {\n\t\t\texpect( methodsResponse.status ).toEqual( 200 );\n\t\t}\n\t   let methodId = methodsResponse.data.id;\n\n\t   // Add in cost, if provided\n\t   if ( cost ) {\n\t\t   let costPayload = {\n\t\t\t   settings: {\n\t\t\t\t   cost: cost\n\t\t\t   }\n\t\t   }\n\n\t\t   const costResponse = await client.put( path + `/${zoneId}/methods/${methodId}`, costPayload );\n\t\t   if ( testResponse ) {\n\t\t\t   expect( costResponse.status ).toEqual( 200 );\n\t\t   }\n\t   }\n\n\t   // Add any additional zones, if provided\n\t   if (additionalZoneMethods.length > 0) {\n\t\t   for ( let z = 0; z < additionalZoneMethods.length; z++ ) {\n\t\t\t   let response = await client.post( path + `/${zoneId}/methods`, { method_id: additionalZoneMethods[z] } );\n\t\t\t   if ( testResponse ) {\n\t\t\t\t   expect( response.status ).toBe( 200 );\n\t\t\t   }\n\t\t   }\n\t   }\n    },\n\t/**\n\t * Use api package to delete shipping zones.\n\t *\n\t * @param {boolean} testResponse Test the response status code.\n\t * @return {Promise} Promise resolving once shipping zones have been deleted.\n\t */\n\tdeleteAllShippingZones: async ( testResponse = true ) => {\n\t\tconst shippingZones = await client.get( shippingZoneEndpoint );\n\t\tif ( shippingZones.data && shippingZones.data.length ) {\n\t\t\tfor ( let z = 0; z < shippingZones.data.length; z++ ) {\n\t\t\t\t// The data store doesn't support deleting the default zone.\n\t\t\t\tif ( shippingZones.data[z].id == 0 ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst response = await client.delete( shippingZoneEndpoint + `/${shippingZones.data[z].id}?force=true` );\n\t\t\t\tif ( testResponse ) {\n\t\t\t\t\texpect( response.status ).toBe( 200 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Use api package to delete shipping classes.\n\t *\n\t * @param {boolean} testResponse Test the response status code.\n\t * @return {Promise} Promise resolving once shipping classes have been deleted.\n\t */\n\tdeleteAllShippingClasses: async ( testResponse = true ) => {\n\t\tconst shippingClasses = await client.get( shippingClassesEndpoint );\n\t\tif ( shippingClasses.data && shippingClasses.data.length ) {\n\t\t\tfor ( let c = 0; c < shippingClasses.data.length; c++ ) {\n\t\t\t\tconst response = await client.delete( shippingClassesEndpoint + `/${shippingClasses.data[c].id}?force=true` );\n\t\t\t\tif ( testResponse ) {\n\t\t\t\t\texpect( response.status ).toBe( 200 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Delete a customer account by their email address if the user exists.\n\t *\n\t * @param emailAddress Customer user account email address.\n\t * @returns {Promise<void>}\n\t */\n\tdeleteCustomerByEmail: async ( emailAddress ) => {\n\t\tconst query = {\n\t\t\tsearch: emailAddress,\n\t\t\tcontext: 'edit',\n\t\t};\n\t\tconst customers = await client.get( userEndpoint, query );\n\n\t\tif ( customers.data && customers.data.length ) {\n\t\t\tfor ( let c = 0; c < customers.data.length; c++ ) {\n\t\t\t\tconst deleteUser = {\n\t\t\t\t\tid: customers.data[c].id,\n\t\t\t\t\tforce: true,\n\t\t\t\t\treassign: 1,\n\t\t\t\t}\n\t\t\t\tawait client.delete( userEndpoint + `/${ deleteUser.id }`, deleteUser );\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Reset a settings group to default values except selects.\n\t * @param settingsGroup\n\t * @param {boolean} testResponse Test the response status code.\n\t * @returns {Promise<void>}\n\t */\n\tresetSettingsGroupToDefault: async ( settingsGroup, testResponse = true ) => {\n\t\tconst settingsClient = Setting.restRepository( client );\n\t\tconst settings = await settingsClient.list( settingsGroup );\n\t\tif ( ! settings.length  ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( let s = 0; s < settings.length; s++ ) {\n\t\t\t// The rest api doesn't allow selects to be set to ''.\n\t\t\tif ( settings[s].type == 'select' && settings[s].default == '' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst defaultSetting = {\n\t\t\t\tgroup_id: settingsGroup,\n\t\t\t\tid: settings[s].id,\n\t\t\t\tvalue: settings[s].default,\n\t\t\t};\n\n\t\t\tconst response = await settingsClient.update( settingsGroup, defaultSetting.id, defaultSetting );\n\t\t\t// Multi-selects have a default '' but return an empty [].\n\t\t\tif ( testResponse && settings[s].type != 'multiselect' ) {\n\t\t\t\texpect( response.value ).toBe( defaultSetting.value );\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Update a setting to the supplied value.\n\t *\n\t * @param {string} settingsGroup The settings group to update.\n\t * @param {string} settingId The setting ID to update\n\t * @param {object} payload An object with a key/value pair to update.\n\t */\n\tupdateSettingOption: async ( settingsGroup, settingId, payload = {} ) => {\n\t\tconst settingsClient = Setting.restRepository( client );\n\t\tawait settingsClient.update( settingsGroup, settingId, payload );\n\t},\n\t/**\n\t * Update a payment gateway.\n\t *\n\t * @param {string} paymentGatewayId The ID of the payment gateway to update.\n\t * @param {object} payload An object with the key/value pair to update.\n\t * @param {boolean} testResponse Test the response status code.\n\t */\n\tupdatePaymentGateway: async ( paymentGatewayId, payload = {}, testResponse = true ) => {\n\t\tconst response = await client.put( `/wc/v3/payment_gateways/${paymentGatewayId}`, payload );\n\t\tif ( testResponse ) {\n\t\t\texpect( response.status ).toEqual( 200 );\n\t\t}\n\t},\n\t/**\n\t * Create a batch of orders using the \"Batch Create Order\" API endpoint.\n\t *\n\t * @param orders Array of orders to be created\n\t * @param {boolean} testResponse Test the response status code.\n\t */\n\tbatchCreateOrders: async ( orders, testResponse = true ) => {\n\t\tconst path = '/wc/v3/orders/batch';\n\t\tconst payload = { create: orders };\n\n\t\tconst response = await client.post(path, payload);\n\t\tif ( testResponse ) {\n\t\t\texpect( response.status ).toBe( 200 );\n\t\t}\n\t},\n\t/**\n\t * Add tax classes.\n\t *\n\t * @param {<Array<Object>>} taxClasses Array of tax class objects.\n\t * @returns {Promise<void>}\n\t */\n\taddTaxClasses: async ( taxClasses ) => {\n\t\t// Only add tax classes which don't already exist.\n\t\tconst existingTaxClasses = await client.get( taxClassesEndpoint );\n\t\tconst existingTaxNames = existingTaxClasses.data.map( taxClass => taxClass.name );\n\t\tconst newTaxClasses = taxClasses.filter( taxClass => ! existingTaxNames.includes( taxClass.name ) );\n\n\t\tfor ( const taxClass of newTaxClasses ) {\n\t\t\tawait client.post( taxClassesEndpoint, taxClass );\n\t\t}\n\t},\n\t/**\n\t * Add tax rates.\n\t *\n\t * @param {<Array<Object>>} taxRates Array of tax rate objects.\n\t * @returns {Promise<void>}\n\t */\n\taddTaxRates: async ( taxRates ) => {\n\t\t// Only add rates which don't already exist\n\t\tconst existingTaxRates = await client.get( taxRatesEndpoint );\n\t\tconst existingRates = existingTaxRates.data.map( taxRate => flattenTaxRate( taxRate ) );\n\n\t\tfor ( const taxRate of taxRates ) {\n\t\t\tif ( ! existingRates.includes( flattenTaxRate( taxRate ) ) ) {\n\t\t\t\tawait client.post( taxRatesEndpoint, taxRate );\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Get the current environment from the WooCommerce system status API.\n\t *\n\t * For more details, see: https://woocommerce.github.io/woocommerce-rest-api-docs/#system-status-environment-properties\n\t *\n\t * @returns {Promise<object>} The environment object from the API response.\n\t */\n\tgetSystemEnvironment: async () => {\n\t\tconst response = await client.get( systemStatusEndpoint );\n\t\tif ( response.data.environment ) {\n\t\t\treturn response.data.environment;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t},\n\t/**\n\t * Create a product category and return the ID. If the category already exists, the ID of the existing category is returned.\n\t *\n\t * @param {string} categoryName The name of the category to create\n\t * @return {Promise<number>} The ID of the category.\n\t */\n\tcreateProductCategory: async ( categoryName ) => {\n\t\tconst payload = { name: categoryName };\n\t\tlet categoryId;\n\n\t\t// First, convert the name to slug for easier searching\n\t\tconst categorySlug = getSlug( categoryName );\n\t\tconst category = await client.get(\n\t\t\t`${ productCategoriesEndpoint }?slug=${ categorySlug }`\n\t\t);\n\n\t\t// If the length is 0, nothing was found, so create the category\n\t\tif ( category.data ) {\n\t\t\t// If the length is 0, no existing category was found, so create the category\n\t\t\tif ( category.data.length === 0 ) {\n\t\t\t\tconst response = await client.post(\n\t\t\t\t\tproductCategoriesEndpoint,\n\t\t\t\t\tpayload\n\t\t\t\t);\n\t\t\t\tcategoryId = response.data.id;\n\t\t\t} else {\n\t\t\t\tcategoryId = category.data[ 0 ].id;\n\t\t\t}\n\t\t}\n\t\treturn categoryId;\n\t},\n};\n"]}