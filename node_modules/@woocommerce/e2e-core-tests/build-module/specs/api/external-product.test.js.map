{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-core-tests/src/specs/api/external-product.test.js"],"names":["HTTPClientFactory","ExternalProduct","require","config","it","describe","beforeAll","runExternalProductAPITest","client","defaultExternalProduct","product","repository","get","admin","url","build","withBasicAuth","username","password","withIndexPermalinks","create","restRepository","expect","toEqual","objectContaining","rawProperties","id","button_text","buttonText","external_url","externalUrl","price","regularPrice","response","statusCode","toBe","data","transformedProperties","transformed","read","status","delete","toBeTruthy","module","exports"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nconst { HTTPClientFactory, ExternalProduct } = require( '@woocommerce/api' );\n\n/**\n * External dependencies\n */\nconst config = require( 'config' );\nconst { it, describe, beforeAll } = require( '@jest/globals' );\n\n/**\n * Create an external product and retrieve via the API.\n */\nconst runExternalProductAPITest = () => {\n\t// @todo: add a call to ensure pretty permalinks are enabled once settings api is in use.\n\tdescribe( 'REST API > External Product', () => {\n\t\tlet client;\n\t\tlet defaultExternalProduct;\n\t\tlet product;\n\t\tlet repository;\n\n\t\tbeforeAll( async () => {\n\t\t\tdefaultExternalProduct = config.get( 'products.external' );\n\t\t\tconst admin = config.get( 'users.admin' );\n\t\t\tconst url = config.get( 'url' );\n\n\t\t\tclient = HTTPClientFactory.build( url )\n\t\t\t\t.withBasicAuth( admin.username, admin.password )\n\t\t\t\t.withIndexPermalinks()\n\t\t\t\t.create();\n\t\t} );\n\n\t\tit( 'can create an external product', async () => {\n\t\t\trepository = ExternalProduct.restRepository( client );\n\n\t\t\t// Check properties of product in the create product response.\n\t\t\tproduct = await repository.create( defaultExternalProduct );\n\t\t\texpect( product ).toEqual(\n\t\t\t\texpect.objectContaining( defaultExternalProduct )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can retrieve a raw external product', async () => {\n\t\t\tconst rawProperties = {\n\t\t\t\tid: product.id,\n\t\t\t\tbutton_text: defaultExternalProduct.buttonText,\n\t\t\t\texternal_url: defaultExternalProduct.externalUrl,\n\t\t\t\tprice: defaultExternalProduct.regularPrice,\n\t\t\t};\n\n\t\t\t// Read product directly from api.\n\t\t\tconst response = await client.get(\n\t\t\t\t`/wc/v3/products/${ product.id }`\n\t\t\t);\n\t\t\texpect( response.statusCode ).toBe( 200 );\n\t\t\texpect( response.data ).toEqual(\n\t\t\t\texpect.objectContaining( rawProperties )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can retrieve a transformed external product', async () => {\n\t\t\tconst transformedProperties = {\n\t\t\t\t...defaultExternalProduct,\n\t\t\t\tid: product.id,\n\t\t\t\tprice: defaultExternalProduct.regularPrice,\n\t\t\t};\n\n\t\t\t// Read product via the repository.\n\t\t\tconst transformed = await repository.read( product.id );\n\t\t\texpect( transformed ).toEqual(\n\t\t\t\texpect.objectContaining( transformedProperties )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can delete an external product', async () => {\n\t\t\tconst status = repository.delete( product.id );\n\t\t\texpect( status ).toBeTruthy();\n\t\t} );\n\t} );\n};\n\nmodule.exports = runExternalProductAPITest;\n"]}