{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-core-tests/src/specs/api/telemetry.test.js"],"names":["HTTPClientFactory","require","config","it","describe","beforeAll","runTelemetryAPITest","client","admin","get","url","build","withBasicAuth","username","password","withIndexPermalinks","create","each","platform","version","data","response","post","catch","err","expect","statusCode","toBe","toBeUndefined","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAE,kBAAF,CAArC;AAEA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAE,QAAF,CAAtB;;AACA,MAAM;AAAEE,EAAAA,EAAF;AAAMC,EAAAA,QAAN;AAAgBC,EAAAA;AAAhB,IAA8BJ,OAAO,CAAE,eAAF,CAA3C;AAEA;AACA;AACA;;;AACA,MAAMK,mBAAmB,GAAG,MAAM;AACjCF,EAAAA,QAAQ,CAAE,sBAAF,EAA0B,MAAM;AACvC,QAAIG,MAAJ;AAEAF,IAAAA,SAAS,CAAE,YAAY;AACtB,YAAMG,KAAK,GAAGN,MAAM,CAACO,GAAP,CAAY,aAAZ,CAAd;AACA,YAAMC,GAAG,GAAGR,MAAM,CAACO,GAAP,CAAY,KAAZ,CAAZ;AAEAF,MAAAA,MAAM,GAAGP,iBAAiB,CAACW,KAAlB,CAAyBD,GAAzB,EACPE,aADO,CACQJ,KAAK,CAACK,QADd,EACwBL,KAAK,CAACM,QAD9B,EAEPC,mBAFO,GAGPC,MAHO,EAAT;AAIA,KARQ,CAAT;AAUAb,IAAAA,EAAE,CAACc,IAAH,CAAS,CAAE,IAAF,EAAQ,EAAR,EAAY;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAZ,EAAiC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAjC,CAAT,EACC,sCADD,EAEC,MAAQC,IAAR,IAAkB;AACjB,YAAMC,QAAQ,GAAG,MAAMd,MAAM,CAC3Be,IADqB,CACd,uBADc,EACUF,IADV,EAErBG,KAFqB,CAEZC,GAAF,IAAW;AAClBC,QAAAA,MAAM,CAAED,GAAG,CAACE,UAAN,CAAN,CAAyBC,IAAzB,CAA+B,GAA/B;AACA,OAJqB,CAAvB;AAMAF,MAAAA,MAAM,CAAEJ,QAAF,CAAN,CAAmBO,aAAnB;AACA,KAVF;AAaAzB,IAAAA,EAAE,CAAE,iCAAF,EAAqC,YAAY;AAClD,YAAMkB,QAAQ,GAAG,MAAMd,MAAM,CAACe,IAAP,CAAc,uBAAd,EAAsC;AAC5DJ,QAAAA,QAAQ,EAAE,KADkD;AAE5DC,QAAAA,OAAO,EAAE;AAFmD,OAAtC,CAAvB;AAKAM,MAAAA,MAAM,CAAEJ,QAAQ,CAACK,UAAX,CAAN,CAA8BC,IAA9B,CAAoC,GAApC;AACA,KAPC,CAAF;AAQA,GAlCO,CAAR;AAmCA,CApCD;;AAsCAE,MAAM,CAACC,OAAP,GAAiBxB,mBAAjB","sourcesContent":["/**\n * Internal dependencies\n */\nconst { HTTPClientFactory } = require( '@woocommerce/api' );\n\n/**\n * External dependencies\n */\nconst config = require( 'config' );\nconst { it, describe, beforeAll } = require( '@jest/globals' );\n\n/**\n * Create the default coupon and tests interactions with it via the API.\n */\nconst runTelemetryAPITest = () => {\n\tdescribe( 'REST API > Telemetry', () => {\n\t\tlet client;\n\n\t\tbeforeAll( async () => {\n\t\t\tconst admin = config.get( 'users.admin' );\n\t\t\tconst url = config.get( 'url' );\n\n\t\t\tclient = HTTPClientFactory.build( url )\n\t\t\t\t.withBasicAuth( admin.username, admin.password )\n\t\t\t\t.withIndexPermalinks()\n\t\t\t\t.create();\n\t\t} );\n\n\t\tit.each( [ null, {}, { platform: 'ios' }, { version: '1.1' } ] )(\n\t\t\t'errors for invalid request body - %p',\n\t\t\tasync ( data ) => {\n\t\t\t\tconst response = await client\n\t\t\t\t\t.post( `/wc-telemetry/tracker`, data )\n\t\t\t\t\t.catch( ( err ) => {\n\t\t\t\t\t\texpect( err.statusCode ).toBe( 400 );\n\t\t\t\t\t} );\n\n\t\t\t\texpect( response ).toBeUndefined();\n\t\t\t}\n\t\t);\n\n\t\tit( 'returns 200 with correct fields', async () => {\n\t\t\tconst response = await client.post( `/wc-telemetry/tracker`, {\n\t\t\t\tplatform: 'ios',\n\t\t\t\tversion: '1.0',\n\t\t\t} );\n\n\t\t\texpect( response.statusCode ).toBe( 200 );\n\t\t} );\n\t} );\n};\n\nmodule.exports = runTelemetryAPITest;\n"]}