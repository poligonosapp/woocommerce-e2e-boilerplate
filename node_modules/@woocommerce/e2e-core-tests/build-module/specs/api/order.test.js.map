{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-core-tests/src/specs/api/order.test.js"],"names":["HTTPClientFactory","Order","require","config","it","describe","beforeAll","runOrderApiTest","client","order","repository","get","admin","url","build","withBasicAuth","username","password","withIndexPermalinks","create","restRepository","expect","toEqual","objectContaining","orderProperties","id","payment_method","paymentMethod","status","response","statusCode","toBe","data","updatedOrderProperties","update","delete","toBeTruthy","module","exports"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nconst { HTTPClientFactory, Order } = require( '@woocommerce/api' );\n\n/**\n * External dependencies\n */\nconst config = require( 'config' );\nconst { it, describe, beforeAll } = require( '@jest/globals' );\n\n/**\n * Creates an order and tests interactions with it via the API.\n */\nconst runOrderApiTest = () => {\n\tdescribe( 'REST API > Order', () => {\n\t\tlet client;\n\t\tlet order;\n\t\tlet repository;\n\n\t\tbeforeAll( async () => {\n\t\t\torder = config.get( 'orders.basicPaidOrder' );\n\t\t\tconst admin = config.get( 'users.admin' );\n\t\t\tconst url = config.get( 'url' );\n\n\t\t\tclient = HTTPClientFactory.build( url )\n\t\t\t\t.withBasicAuth( admin.username, admin.password )\n\t\t\t\t.withIndexPermalinks()\n\t\t\t\t.create();\n\t\t} );\n\n\t\tit( 'can create an order', async () => {\n\t\t\trepository = Order.restRepository( client );\n\n\t\t\t// Check properties of the order in the create order response.\n\t\t\torder = await repository.create( order );\n\t\t\texpect( order ).toEqual( expect.objectContaining( order ) );\n\t\t} );\n\n\t\tit( 'can retrieve an order', async () => {\n\t\t\tconst orderProperties = {\n\t\t\t\tid: order.id,\n\t\t\t\tpayment_method: order.paymentMethod,\n\t\t\t\tstatus: order.status,\n\t\t\t};\n\n\t\t\t// Read order directly from API to compare.\n\t\t\tconst response = await client.get( `/wc/v3/orders/${ order.id }` );\n\t\t\texpect( response.statusCode ).toBe( 200 );\n\t\t\texpect( response.data ).toEqual(\n\t\t\t\texpect.objectContaining( orderProperties )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can update an order', async () => {\n\t\t\tconst updatedOrderProperties = {\n\t\t\t\tpayment_method: 'bacs',\n\t\t\t\tstatus: 'completed',\n\t\t\t};\n\n\t\t\tawait repository.update( order.id, updatedOrderProperties );\n\n\t\t\t// Check the order response for the updated values.\n\t\t\tconst response = await client.get( `/wc/v3/orders/${ order.id }` );\n\t\t\texpect( response.statusCode ).toBe( 200 );\n\t\t\texpect( response.data ).toEqual(\n\t\t\t\texpect.objectContaining( updatedOrderProperties )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can delete an order', async () => {\n\t\t\t// Delete the order\n\t\t\tconst status = await repository.delete( order.id );\n\n\t\t\t// If the delete is successful, the response comes back truthy\n\t\t\texpect( status ).toBeTruthy();\n\t\t} );\n\t} );\n};\n\nmodule.exports = runOrderApiTest;\n"]}