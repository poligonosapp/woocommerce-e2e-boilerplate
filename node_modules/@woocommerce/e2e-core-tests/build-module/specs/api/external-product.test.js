import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Internal dependencies
 */
const {
  HTTPClientFactory,
  ExternalProduct
} = require('@woocommerce/api');
/**
 * External dependencies
 */


const config = require('config');

const {
  it,
  describe,
  beforeAll
} = require('@jest/globals');
/**
 * Create an external product and retrieve via the API.
 */


const runExternalProductAPITest = () => {
  // @todo: add a call to ensure pretty permalinks are enabled once settings api is in use.
  describe('REST API > External Product', () => {
    let client;
    let defaultExternalProduct;
    let product;
    let repository;
    beforeAll(async () => {
      defaultExternalProduct = config.get('products.external');
      const admin = config.get('users.admin');
      const url = config.get('url');
      client = HTTPClientFactory.build(url).withBasicAuth(admin.username, admin.password).withIndexPermalinks().create();
    });
    it('can create an external product', async () => {
      repository = ExternalProduct.restRepository(client); // Check properties of product in the create product response.

      product = await repository.create(defaultExternalProduct);
      expect(product).toEqual(expect.objectContaining(defaultExternalProduct));
    });
    it('can retrieve a raw external product', async () => {
      const rawProperties = {
        id: product.id,
        button_text: defaultExternalProduct.buttonText,
        external_url: defaultExternalProduct.externalUrl,
        price: defaultExternalProduct.regularPrice
      }; // Read product directly from api.

      const response = await client.get(`/wc/v3/products/${product.id}`);
      expect(response.statusCode).toBe(200);
      expect(response.data).toEqual(expect.objectContaining(rawProperties));
    });
    it('can retrieve a transformed external product', async () => {
      const transformedProperties = _objectSpread(_objectSpread({}, defaultExternalProduct), {}, {
        id: product.id,
        price: defaultExternalProduct.regularPrice
      }); // Read product via the repository.


      const transformed = await repository.read(product.id);
      expect(transformed).toEqual(expect.objectContaining(transformedProperties));
    });
    it('can delete an external product', async () => {
      const status = repository.delete(product.id);
      expect(status).toBeTruthy();
    });
  });
};

module.exports = runExternalProductAPITest;
//# sourceMappingURL=external-product.test.js.map