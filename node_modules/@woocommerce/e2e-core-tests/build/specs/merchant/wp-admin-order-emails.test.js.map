{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-core-tests/src/specs/merchant/wp-admin-order-emails.test.js"],"names":["merchant","clickUpdateOrder","createSimpleOrder","selectOrderAction","deleteAllEmailLogs","require","config","customerEmail","get","adminEmail","has","storeName","orderId","runMerchantOrderEmailsTest","describe","beforeAll","login","Promise","all","page","click","expect","toFill","afterEach","it","openEmailLog","toMatchElement","text","goToOrder","module","exports"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nconst {\n\tmerchant,\n\tclickUpdateOrder,\n\tcreateSimpleOrder,\n\tselectOrderAction,\n\tdeleteAllEmailLogs,\n} = require( '@woocommerce/e2e-utils' );\n\nconst config = require( 'config' );\nconst customerEmail = config.get( 'addresses.customer.billing.email' );\nconst adminEmail = config.has( 'users.admin.email' ) ? config.get( 'users.admin.email' )  : 'admin@woocommercecoree2etestsuite.com';\nconst storeName = 'WooCommerce Core E2E Test Suite';\n\nlet orderId;\n\nconst runMerchantOrderEmailsTest = () => {\n\n\tdescribe('Merchant > Order Action emails received', () => {\n\t\tbeforeAll( async () => {\n\t\t\tawait merchant.login();\n\n\t\t\t// Clear out the existing email logs if any\n\t\t\tawait deleteAllEmailLogs();\n\n\t\t\torderId = await createSimpleOrder( 'Processing' );\n\n\t\t\tawait Promise.all( [\n\t\t\t\t// Select the billing email address field and add the customer billing email from the config\n\t\t\t\tawait page.click( 'div.order_data_column:nth-child(2) > h3:nth-child(1) > a:nth-child(1)' ),\n\t\t\t\tawait expect( page ).toFill( '#_billing_email', customerEmail ),\n\t\t\t\tawait clickUpdateOrder( 'Order updated.' ),\n\t\t\t] );\n\t\t} );\n\n\t\tafterEach( async () => {\n\t\t\t// Clear out any emails after each test\n\t\t\tawait deleteAllEmailLogs();\n\t\t} );\n\n\t\t// New order emails are sent automatically when we create the simple order above, so let's verify we get these emails\n\t\tit('can receive new order email', async () => {\n\t\t\tawait merchant.openEmailLog();\n\t\t\tawait expect( page ).toMatchElement( '.column-receiver', { text: adminEmail } );\n\t\t\tawait expect( page ).toMatchElement( '.column-subject', { text: `[${storeName}]: New order #${orderId}` } );\n\t\t} );\n\n\t\tit('can resend new order notification', async () => {\n\t\t\tawait merchant.goToOrder( orderId );\n\t\t\tawait selectOrderAction( 'send_order_details_admin' );\n\n\t\t\tawait merchant.openEmailLog();\n\t\t\tawait expect( page ).toMatchElement( '.column-receiver', { text: adminEmail } );\n\t\t\tawait expect( page ).toMatchElement( '.column-subject', { text: `[${storeName}]: New order #${orderId}` } );\n\t\t} );\n\n\t\tit('can email invoice/order details to customer', async () => {\n\t\t\tawait merchant.goToOrder( orderId );\n\t\t\tawait selectOrderAction( 'send_order_details' );\n\n\t\t\tawait merchant.openEmailLog();\n\t\t\tawait expect( page ).toMatchElement( '.column-receiver', { text: customerEmail } );\n\t\t\tawait expect( page ).toMatchElement( '.column-subject', { text: `Invoice for order #${orderId} on ${storeName}` } );\n\t\t} );\n\n\t} );\n}\n\nmodule.exports = runMerchantOrderEmailsTest;\n"]}