{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-core-tests/src/specs/merchant/wp-admin-product-import-csv.test.js"],"names":["merchant","setCheckbox","withRestApi","require","getCoreTestsRoot","it","describe","beforeAll","afterAll","path","coreTestsPath","filePath","resolve","coreTestsRoot","filePathOverride","productNames","productNamesOverride","productPricesOverride","errorMessage","runImportProductsTest","login","openAllProductsView","openImportProducts","deleteAllProducts","deleteAllProductAttributes","deleteAllProductCategories","deleteAllProductTags","Promise","all","page","click","waitForNavigation","waitUntil","waitForSelector","expect","toMatchElement","uploader","$","uploadFile","toClick","visible","timeout","text","productTitles","$$eval","elements","map","item","innerHTML","sort","toEqual","productPrices","innerText","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable jest/no-export, jest/no-disabled-tests */\n/**\n * Internal dependencies\n */\nconst {\n\tmerchant,\n\tsetCheckbox,\n\twithRestApi,\n} = require( '@woocommerce/e2e-utils' );\nconst getCoreTestsRoot = require( '../../../core-tests-root' );\n\n/**\n * External dependencies\n */\nconst { it, describe, beforeAll, afterAll } = require( '@jest/globals' );\n\nconst path = require( 'path' );\nconst coreTestsPath = getCoreTestsRoot();\nconst filePath = path.resolve(\n\tcoreTestsPath.coreTestsRoot,\n\t'test-data/sample_products.csv'\n);\nconst filePathOverride = path.resolve(\n\tcoreTestsPath.coreTestsRoot,\n\t'test-data/sample_products_override.csv'\n);\nconst productNames = [\n\t'V-Neck T-Shirt',\n\t'Hoodie',\n\t'Hoodie with Logo',\n\t'T-Shirt',\n\t'Beanie',\n\t'Belt',\n\t'Cap',\n\t'Sunglasses',\n\t'Hoodie with Pocket',\n\t'Hoodie with Zipper',\n\t'Long Sleeve Tee',\n\t'Polo',\n\t'Album',\n\t'Single',\n\t'T-Shirt with Logo',\n\t'Beanie with Logo',\n\t'Logo Collection',\n\t'WordPress Pennant',\n];\nconst productNamesOverride = [\n\t'V-Neck T-Shirt Override',\n\t'Hoodie Override',\n\t'Hoodie with Logo Override',\n\t'T-Shirt Override',\n\t'Beanie Override',\n\t'Belt Override',\n\t'Cap Override',\n\t'Sunglasses Override',\n\t'Hoodie with Pocket Override',\n\t'Hoodie with Zipper Override',\n\t'Long Sleeve Tee Override',\n\t'Polo Override',\n\t'Album Override',\n\t'Single Override',\n\t'T-Shirt with Logo Override',\n\t'Beanie with Logo Override',\n\t'Logo Collection Override',\n\t'WordPress Pennant Override',\n];\nconst productPricesOverride = [\n\t'$111.05',\n\t'$118.00',\n\t'$145.00',\n\t'$120.00',\n\t'$118.00',\n\t'$118.00',\n\t'$13.00',\n\t'$12.00',\n\t'$115.00',\n\t'$120.00',\n\t'$125.00',\n\t'$145.00',\n\t'$145.00',\n\t'$135.00',\n\t'$190.00',\n\t'$118.00',\n\t'$116.00',\n\t'$165.00',\n\t'$155.00',\n\t'$120.00',\n\t'$118.00',\n\t'$118.00',\n\t'$145.00',\n\t'$142.00',\n\t'$145.00',\n\t'$115.00',\n\t'$120.00',\n];\nconst errorMessage =\n\t'Invalid file type. The importer supports CSV and TXT file formats.';\n\nconst runImportProductsTest = () => {\n\tdescribe( 'Import Products from a CSV file', () => {\n\t\tbeforeAll( async () => {\n\t\t\tawait merchant.login();\n\t\t\tawait merchant.openAllProductsView();\n\t\t\tawait merchant.openImportProducts();\n\t\t} );\n\n\t\tafterAll(async () => {\n\t\t\t// Delete imported products\n\t\t\tawait withRestApi.deleteAllProducts();\n\t\t\tawait withRestApi.deleteAllProductAttributes( false );\n\t\t\tawait withRestApi.deleteAllProductCategories( false );\n\t\t\tawait withRestApi.deleteAllProductTags( false );\n\t\t});\n\n\t\tit( 'should show error message if you go without providing CSV file', async () => {\n\t\t\t// Verify the error message if you go without providing CSV file\n\t\t\tawait Promise.all( [\n\t\t\t\tpage.click( 'button[value=\"Continue\"]' ),\n\t\t\t\tpage.waitForNavigation( { waitUntil: 'networkidle0' } ),\n\t\t\t] );\n\t\t\tawait page.waitForSelector( 'div.error' );\n\t\t\tawait expect( page ).toMatchElement(\n\t\t\t\t'div.error > p',\n\t\t\t\terrorMessage\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can upload the CSV file and import products', async () => {\n\t\t\t// Put the CSV products file and proceed further\n\t\t\tconst uploader = await page.$( 'input[type=file]' );\n\t\t\tawait uploader.uploadFile( filePath );\n\t\t\tawait expect( page ).toClick( 'button[value=\"Continue\"]' );\n\n\t\t\t// Click on Run the importer\n\t\t\tawait page.waitForSelector( 'button[value=\"Run the importer\"]' );\n\t\t\tawait expect( page ).toClick( 'button[value=\"Run the importer\"]' );\n\n\t\t\t// Waiting for importer to finish\n\t\t\tawait page.waitForSelector( 'section.woocommerce-importer-done', {\n\t\t\t\tvisible: true,\n\t\t\t\ttimeout: 120000,\n\t\t\t} );\n\t\t\tawait page.waitForSelector( '.woocommerce-importer-done' );\n\t\t\tawait expect( page ).toMatchElement( '.woocommerce-importer-done', {\n\t\t\t\ttext: 'Import complete!',\n\t\t\t} );\n\t\t} );\n\n\t\tit( 'can see and verify the uploaded products', async () => {\n\t\t\t// Click on view products\n\t\t\tawait page.waitForSelector(\n\t\t\t\t'div.wc-actions > a.button.button-primary'\n\t\t\t);\n\t\t\tawait expect( page ).toClick(\n\t\t\t\t'div.wc-actions > a.button.button-primary'\n\t\t\t);\n\n\t\t\t// Gathering product names\n\t\t\tawait page.waitForSelector( 'a.row-title' );\n\t\t\tconst productTitles = await page.$$eval(\n\t\t\t\t'a.row-title',\n\t\t\t\t( elements ) => elements.map( ( item ) => item.innerHTML )\n\t\t\t);\n\n\t\t\t// Compare imported product names\n\t\t\texpect( productTitles.sort() ).toEqual( productNames.sort() );\n\t\t} );\n\n\t\tit( 'can override the existing products via CSV import', async () => {\n\t\t\tawait merchant.openImportProducts();\n\n\t\t\t// Put the CSV Override products file, set checkbox and proceed further\n\t\t\tconst uploader = await page.$( 'input[type=file]' );\n\t\t\tawait uploader.uploadFile( filePathOverride );\n\t\t\tawait setCheckbox( '#woocommerce-importer-update-existing' );\n\t\t\tawait expect( page ).toClick( 'button[value=\"Continue\"]' );\n\n\t\t\t// Click on Run the importer\n\t\t\tawait page.waitForSelector( 'button[value=\"Run the importer\"]' );\n\t\t\tawait expect( page ).toClick( 'button[value=\"Run the importer\"]' );\n\n\t\t\t// Waiting for importer to finish\n\t\t\tawait page.waitForSelector( 'section.woocommerce-importer-done', {\n\t\t\t\tvisible: true,\n\t\t\t\ttimeout: 60000,\n\t\t\t} );\n\t\t\tawait page.waitForSelector( '.woocommerce-importer-done' );\n\t\t\tawait expect( page ).toMatchElement( '.woocommerce-importer-done', {\n\t\t\t\ttext: 'Import complete!',\n\t\t\t} );\n\t\t} );\n\n\t\tit( 'can see and verify the uploaded overrode products', async () => {\n\t\t\t// Click on view products\n\t\t\tawait page.waitForSelector(\n\t\t\t\t'div.wc-actions > a.button.button-primary'\n\t\t\t);\n\t\t\tawait expect( page ).toClick(\n\t\t\t\t'div.wc-actions > a.button.button-primary'\n\t\t\t);\n\n\t\t\t// Gathering product names\n\t\t\tawait page.waitForSelector( 'a.row-title' );\n\t\t\tconst productTitles = await page.$$eval(\n\t\t\t\t'a.row-title',\n\t\t\t\t( elements ) => elements.map( ( item ) => item.innerHTML )\n\t\t\t);\n\n\t\t\t// Compare overridden product names\n\t\t\texpect( productTitles.sort() ).toEqual(\n\t\t\t\tproductNamesOverride.sort()\n\t\t\t);\n\n\t\t\t// Gathering product prices\n\t\t\tawait page.waitForSelector( 'td.price.column-price' );\n\t\t\tconst productPrices = await page.$$eval( '.amount', ( elements ) =>\n\t\t\t\telements.map( ( item ) => item.innerText )\n\t\t\t);\n\n\t\t\t// Compare overridden product prices\n\t\t\texpect( productPrices.sort() ).toEqual(\n\t\t\t\tproductPricesOverride.sort()\n\t\t\t);\n\t\t} );\n\t} );\n};\n\nmodule.exports = runImportProductsTest;\n"]}