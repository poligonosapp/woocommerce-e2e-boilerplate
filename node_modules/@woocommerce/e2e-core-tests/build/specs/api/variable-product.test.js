"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable jest/no-export, jest/no-disabled-tests */

/**
 * Internal dependencies
 */
const {
  HTTPClientFactory,
  VariableProduct,
  ProductVariation
} = require('@woocommerce/api');
/**
 * External dependencies
 */


const config = require('config');

const {
  it,
  describe,
  beforeAll
} = require('@jest/globals');
/**
 * Create a variable product and retrieve via the API.
 */


const runVariableProductAPITest = () => {
  describe('REST API > Variable Product', () => {
    let client;
    let defaultVariableProduct;
    let defaultVariations;
    let baseVariableProduct;
    let product;
    let variations = [];
    let productRepository;
    let variationRepository;
    beforeAll(async () => {
      defaultVariableProduct = config.get('products.variable');
      defaultVariations = config.get('products.variations');
      const admin = config.get('users.admin');
      const url = config.get('url');
      client = HTTPClientFactory.build(url).withBasicAuth(admin.username, admin.password).withIndexPermalinks().create();
    });
    it('can create a variable product', async () => {
      productRepository = VariableProduct.restRepository(client); // Check properties of product in the create product response.

      product = await productRepository.create(defaultVariableProduct);
      expect(product).toEqual(expect.objectContaining(defaultVariableProduct));
    });
    it('can add variations', async () => {
      variationRepository = ProductVariation.restRepository(client);

      for (let v = 0; v < defaultVariations.length; v++) {
        const variation = await variationRepository.create(product.id, defaultVariations[v]); // Test that variation id is a number.

        expect(variation.id).toBeGreaterThan(0);
        variations.push(variation.id);
      }

      baseVariableProduct = _objectSpread(_objectSpread({
        id: product.id
      }, defaultVariableProduct), {}, {
        variations
      });
    });
    it('can retrieve a transformed variable product', async () => {
      // Read product via the repository.
      const transformed = await productRepository.read(product.id);
      expect(transformed).toEqual(expect.objectContaining(baseVariableProduct));
    });
    it('can retrieve transformed product variations', async () => {
      // Read variations via the repository.
      const transformed = await variationRepository.list(product.id);
      expect(transformed).toHaveLength(defaultVariations.length);
    });
    it('can delete a variation', async () => {
      const variationId = baseVariableProduct.variations.pop();
      const status = variationRepository.delete(product.id, variationId);
      expect(status).toBeTruthy();
    });
    it('can delete a variable product', async () => {
      const status = productRepository.delete(product.id);
      expect(status).toBeTruthy();
    });
  });
};

module.exports = runVariableProductAPITest;
//# sourceMappingURL=variable-product.test.js.map