{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-core-tests/src/specs/api/grouped-product.test.js"],"names":["HTTPClientFactory","GroupedProduct","SimpleProduct","require","config","it","describe","beforeAll","runGroupedProductAPITest","client","defaultGroupedProduct","baseGroupedProduct","product","groupedProducts","repository","get","admin","url","build","withBasicAuth","username","password","withIndexPermalinks","create","restRepository","c","length","push","id","expect","toEqual","objectContaining","rawProperties","grouped_products","response","statusCode","toBe","data","transformed","read","status","delete","toBeTruthy","forEach","productId","module","exports"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nconst {\n\tHTTPClientFactory,\n\tGroupedProduct,\n\tSimpleProduct,\n} = require( '@woocommerce/api' );\n\n/**\n * External dependencies\n */\nconst config = require( 'config' );\nconst { it, describe, beforeAll } = require( '@jest/globals' );\n\n/**\n * Create an external product and retrieve via the API.\n */\nconst runGroupedProductAPITest = () => {\n\t// @todo: add a call to ensure pretty permalinks are enabled once settings api is in use.\n\tdescribe( 'REST API > Grouped Product', () => {\n\t\tlet client;\n\t\tlet defaultGroupedProduct;\n\t\tlet baseGroupedProduct;\n\t\tlet product;\n\t\tconst groupedProducts = [];\n\t\tlet repository;\n\n\t\tbeforeAll( async () => {\n\t\t\tdefaultGroupedProduct = config.get( 'products.grouped' );\n\t\t\tconst admin = config.get( 'users.admin' );\n\t\t\tconst url = config.get( 'url' );\n\n\t\t\tclient = HTTPClientFactory.build( url )\n\t\t\t\t.withBasicAuth( admin.username, admin.password )\n\t\t\t\t.withIndexPermalinks()\n\t\t\t\t.create();\n\n\t\t\t// Create the simple products to be grouped first.\n\t\t\trepository = SimpleProduct.restRepository( client );\n\t\t\tfor (\n\t\t\t\tlet c = 0;\n\t\t\t\tc < defaultGroupedProduct.groupedProducts.length;\n\t\t\t\tc++\n\t\t\t) {\n\t\t\t\tproduct = await repository.create(\n\t\t\t\t\tdefaultGroupedProduct.groupedProducts[ c ]\n\t\t\t\t);\n\t\t\t\tgroupedProducts.push( product.id );\n\t\t\t}\n\t\t} );\n\n\t\tit( 'can create a grouped product', async () => {\n\t\t\tbaseGroupedProduct = {\n\t\t\t\t...defaultGroupedProduct,\n\t\t\t\tgroupedProducts,\n\t\t\t};\n\t\t\trepository = GroupedProduct.restRepository( client );\n\n\t\t\t// Check properties of product in the create product response.\n\t\t\tproduct = await repository.create( baseGroupedProduct );\n\t\t\texpect( product ).toEqual(\n\t\t\t\texpect.objectContaining( baseGroupedProduct )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can retrieve a raw grouped product', async () => {\n\t\t\tconst rawProperties = {\n\t\t\t\tid: product.id,\n\t\t\t\tgrouped_products: baseGroupedProduct.groupedProducts,\n\t\t\t\t...defaultGroupedProduct,\n\t\t\t};\n\t\t\tdelete rawProperties.groupedProducts;\n\n\t\t\t// Read product directly from api.\n\t\t\tconst response = await client.get(\n\t\t\t\t`/wc/v3/products/${ product.id }`\n\t\t\t);\n\t\t\texpect( response.statusCode ).toBe( 200 );\n\t\t\texpect( response.data ).toEqual(\n\t\t\t\texpect.objectContaining( rawProperties )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can retrieve a transformed grouped product', async () => {\n\t\t\t// Read product via the repository.\n\t\t\tconst transformed = await repository.read( product.id );\n\t\t\texpect( transformed ).toEqual(\n\t\t\t\texpect.objectContaining( baseGroupedProduct )\n\t\t\t);\n\t\t} );\n\n\t\tit( 'can delete a grouped product', async () => {\n\t\t\tconst status = repository.delete( product.id );\n\t\t\texpect( status ).toBeTruthy();\n\t\t\t// Delete the simple \"child\" products.\n\t\t\tgroupedProducts.forEach( ( productId ) => {\n\t\t\t\trepository.delete( productId );\n\t\t\t} );\n\t\t} );\n\t} );\n};\n\nmodule.exports = runGroupedProductAPITest;\n"]}