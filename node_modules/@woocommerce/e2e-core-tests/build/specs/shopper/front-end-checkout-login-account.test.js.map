{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-core-tests/src/specs/shopper/front-end-checkout-login-account.test.js"],"names":["shopper","merchant","createSimpleProduct","uiUnblocked","setCheckbox","settingsPageSaveChanges","require","it","describe","beforeAll","config","runCheckoutLoginAccountTest","productId","login","openSettings","logout","goToShop","addToCartFromShopPage","goToCheckout","afterAll","page","waitForSelector","expect","toClick","type","get","Promise","all","waitForNavigation","waitUntil","click","placeOrder","toMatchElement","text","gotoMyAccount","url","toMatch","module","exports"],"mappings":";;AAAA;AACA;AACA;AACC,MAAM;AACNA,EAAAA,OADM;AAENC,EAAAA,QAFM;AAGNC,EAAAA,mBAHM;AAINC,EAAAA,WAJM;AAKNC,EAAAA,WALM;AAMNC,EAAAA;AANM,IAOHC,OAAO,CAAE,wBAAF,CAPV;AASD;AACA;AACA;;;AACA,MAAM;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,QAAN;AAAgBC,EAAAA;AAAhB,IAA8BH,OAAO,CAAE,eAAF,CAA3C;;AAEA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMK,2BAA2B,GAAG,MAAM;AACzCH,EAAAA,QAAQ,CAAC,gCAAD,EAAmC,MAAM;AAChD,QAAII,SAAJ;AAEAH,IAAAA,SAAS,CAAC,YAAY;AACrBG,MAAAA,SAAS,GAAG,MAAMV,mBAAmB,EAArC,CADqB,CAGrB;;AACA,YAAMD,QAAQ,CAACY,KAAT,EAAN;AACA,YAAMZ,QAAQ,CAACa,YAAT,CAAsB,SAAtB,CAAN;AACA,YAAMV,WAAW,CAAC,6CAAD,CAAjB;AACA,YAAMC,uBAAuB,EAA7B;AACA,YAAMJ,QAAQ,CAACc,MAAT,EAAN,CARqB,CAUrB;;AACA,YAAMf,OAAO,CAACgB,QAAR,EAAN;AACA,YAAMhB,OAAO,CAACiB,qBAAR,CAA+BL,SAA/B,CAAN;AACA,YAAMT,WAAW,EAAjB;AACA,YAAMH,OAAO,CAACkB,YAAR,EAAN;AACA,KAfQ,CAAT;AAiBAC,IAAAA,QAAQ,CAAE,YAAY;AACrB,YAAMnB,OAAO,CAACe,MAAR,EAAN;AACA,KAFO,CAAR;AAIAR,IAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAY;AAClE;AACA,YAAMa,IAAI,CAACC,eAAL,CAAqB,gCAArB,CAAN;AACA,YAAMC,MAAM,CAACF,IAAD,CAAN,CAAaG,OAAb,CAAqB,iCAArB,CAAN,CAHkE,CAKlE;;AACA,YAAMH,IAAI,CAACI,IAAL,CAAW,WAAX,EAAwBd,MAAM,CAACe,GAAP,CAAW,yBAAX,CAAxB,CAAN;AACA,YAAML,IAAI,CAACI,IAAL,CAAW,WAAX,EAAwBd,MAAM,CAACe,GAAP,CAAW,yBAAX,CAAxB,CAAN;AAEA,YAAMC,OAAO,CAACC,GAAR,CAAY,CACjBP,IAAI,CAACQ,iBAAL,CAAuB;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAvB,CADiB,EAEjBT,IAAI,CAACU,KAAL,CAAW,sBAAX,CAFiB,CAAZ,CAAN,CATkE,CAclE;;AACA,YAAM9B,OAAO,CAAC+B,UAAR,EAAN;AACA,YAAMT,MAAM,CAACF,IAAD,CAAN,CAAaY,cAAb,CAA4B,gBAA5B,EAA8C;AAACC,QAAAA,IAAI,EAAE;AAAP,OAA9C,CAAN,CAhBkE,CAkBlE;;AACA,YAAMX,MAAM,CAACF,IAAD,CAAN,CAAaY,cAAb,CAA4B,eAA5B,EAA6C;AAACC,QAAAA,IAAI,EAAE;AAAP,OAA7C,CAAN,CAnBkE,CAqBlE;;AACA,YAAMjC,OAAO,CAACkC,aAAR,EAAN;AAEA,YAAMR,OAAO,CAACC,GAAR,CAAa,CAClB,MAAML,MAAM,CAACF,IAAI,CAACe,GAAL,EAAD,CAAN,CAAmBC,OAAnB,CAA2B,aAA3B,CADY,EAElB,MAAMd,MAAM,CAACF,IAAD,CAAN,CAAaY,cAAb,CAA4B,IAA5B,EAAkC;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAlC,CAFY,CAAb,CAAN;AAIA,KA5BC,CAAF;AA6BA,GArDO,CAAR;AAsDA,CAvDD;;AAyDAI,MAAM,CAACC,OAAP,GAAiB3B,2BAAjB","sourcesContent":["/**\n * Internal dependencies\n */\n const {\n\tshopper,\n\tmerchant,\n\tcreateSimpleProduct,\n\tuiUnblocked,\n\tsetCheckbox,\n\tsettingsPageSaveChanges,\n} = require( '@woocommerce/e2e-utils' );\n\n/**\n * External dependencies\n */\nconst { it, describe, beforeAll } = require( '@jest/globals' );\n\nconst config = require('config');\n\nconst runCheckoutLoginAccountTest = () => {\n\tdescribe('Shopper Checkout Login Account', () => {\n\t\tlet productId;\n\n\t\tbeforeAll(async () => {\n\t\t\tproductId = await createSimpleProduct();\n\n\t\t\t// Set checkbox for logging to account during checkout\n\t\t\tawait merchant.login();\n\t\t\tawait merchant.openSettings('account');\n\t\t\tawait setCheckbox('#woocommerce_enable_checkout_login_reminder');\n\t\t\tawait settingsPageSaveChanges();\n\t\t\tawait merchant.logout();\n\n\t\t\t// Add simple product to cart and proceed to checkout\n\t\t\tawait shopper.goToShop();\n\t\t\tawait shopper.addToCartFromShopPage( productId );\n\t\t\tawait uiUnblocked();\n\t\t\tawait shopper.goToCheckout();\n\t\t});\n\n\t\tafterAll( async () => {\n\t\t\tawait shopper.logout();\n\t\t} );\n\n\t\tit('can login to an existing account during checkout', async () => {\n\t\t\t// Click to login during checkout\n\t\t\tawait page.waitForSelector('.woocommerce-form-login-toggle');\n\t\t\tawait expect(page).toClick('.woocommerce-info > a.showlogin');\n\n\t\t\t// Fill shopper's login credentials and proceed further\n\t\t\tawait page.type( '#username', config.get('users.customer.username') );\n\t\t\tawait page.type( '#password', config.get('users.customer.password') );\n\n\t\t\tawait Promise.all([\n\t\t\t\tpage.waitForNavigation({waitUntil: 'networkidle0'}),\n\t\t\t\tpage.click('button[name=\"login\"]'),\n\t\t\t]);\n\n\t\t\t// Place an order\n\t\t\tawait shopper.placeOrder();\n\t\t\tawait expect(page).toMatchElement('h1.entry-title', {text: 'Order received'});\n\n\t\t\t// Verify the email of a logged in user\n\t\t\tawait expect(page).toMatchElement('ul > li.email', {text: 'Email: john.doe@example.com'});\n\n\t\t\t// Verify the user is logged in on my account page\n\t\t\tawait shopper.gotoMyAccount();\n\n\t\t\tawait Promise.all( [\n\t\t\t\tawait expect(page.url()).toMatch('my-account/'),\n\t\t\t\tawait expect(page).toMatchElement('h1', {text: 'My account'}),\n\t\t\t] );\n\t\t});\n\t});\n};\n\nmodule.exports = runCheckoutLoginAccountTest;\n"]}