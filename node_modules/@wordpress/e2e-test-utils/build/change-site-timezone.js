"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeSiteTimezone = changeSiteTimezone;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _visitAdminPage = require("./visit-admin-page");

var _switchUserToAdmin = require("./switch-user-to-admin");

var _switchUserToTest = require("./switch-user-to-test");

/**
 * Internal dependencies
 */

/**
 * Visits general settings page and changes the timezone to the given value.
 *
 * @param {string} timezone Value of the timezone to set.
 *
 * @return {string} Value of the previous timezone.
 */
function changeSiteTimezone(_x) {
  return _changeSiteTimezone.apply(this, arguments);
}

function _changeSiteTimezone() {
  _changeSiteTimezone = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(timezone) {
    var oldTimezone;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _switchUserToAdmin.switchUserToAdmin)();

          case 2:
            _context.next = 4;
            return (0, _visitAdminPage.visitAdminPage)('options-general.php');

          case 4:
            _context.next = 6;
            return page.$eval('#timezone_string', function (element) {
              return element.options[element.selectedIndex].text;
            });

          case 6:
            oldTimezone = _context.sent;
            _context.next = 9;
            return page.select('#timezone_string', timezone);

          case 9:
            _context.next = 11;
            return page.click('#submit');

          case 11:
            _context.next = 13;
            return (0, _switchUserToTest.switchUserToTest)();

          case 13:
            return _context.abrupt("return", oldTimezone);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _changeSiteTimezone.apply(this, arguments);
}
//# sourceMappingURL=change-site-timezone.js.map